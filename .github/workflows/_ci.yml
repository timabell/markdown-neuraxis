name: CI

on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag for version updates'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  get-rust-version:
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.get-rust-version.outputs.rust-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get rust version
        id: get-rust-version
        run: |
          if [ -f .tool-versions ]; then
            echo "rust-version=$(cat .tool-versions | grep rust | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          else
            echo "rust-version=stable" >> $GITHUB_OUTPUT
          fi

  deny:
    runs-on: ubuntu-latest
    needs: get-rust-version
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.get-rust-version.outputs.rust-version }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Run cargo-deny
        run: cargo deny check bans licenses sources

  machete:
    runs-on: ubuntu-latest
    needs: get-rust-version
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.get-rust-version.outputs.rust-version }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install cargo-machete
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete

      - name: Run cargo-machete
        run: cargo machete

  build:
    runs-on: ${{ matrix.runner }}
    needs: get-rust-version
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os: linux
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            os: windows
          - runner: macos-13
            target: x86_64-apple-darwin
            os: macos
          - runner: macos-latest
            target: aarch64-apple-darwin
            os: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.get-rust-version.outputs.rust-version }}
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev libwebkit2gtk-4.1-dev libxdo-dev

      - name: Install macOS dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install create-dmg

      - name: Update version in Cargo.toml
        if: inputs.release_tag != ''
        shell: bash
        run: |
          version="${{ inputs.release_tag }}"
          version="${version#v}"  # Remove 'v' prefix if present
          sed -i.bak "s/^version = .*/version = \"$version\"/" Cargo.toml

      - name: Build CLI binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package markdown-neuraxis-cli

      - name: Build Dioxus binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package markdown-neuraxis-dioxus

      - name: Run tests
        run: cargo test --release --target ${{ matrix.target }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          if [ "${{ matrix.os }}" = "windows" ]; then
            cli_bin="target/${{ matrix.target }}/release/markdown-neuraxis-cli.exe"
            dioxus_bin="target/${{ matrix.target }}/release/markdown-neuraxis-dioxus.exe"
            cp "$cli_bin" "artifacts/markdown-neuraxis-cli-${{ matrix.os }}.exe"
            cp "$dioxus_bin" "artifacts/markdown-neuraxis-dioxus-${{ matrix.os }}.exe"
          else
            cli_bin="target/${{ matrix.target }}/release/markdown-neuraxis-cli"
            dioxus_bin="target/${{ matrix.target }}/release/markdown-neuraxis-dioxus"
            cp "$cli_bin" "artifacts/markdown-neuraxis-cli-${{ matrix.os }}"
            cp "$dioxus_bin" "artifacts/markdown-neuraxis-dioxus-${{ matrix.os }}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: markdown-neuraxis-${{ matrix.os }}
          path: artifacts/
          retention-days: 7